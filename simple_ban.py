# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SimbleBan
                                 A QGIS plugin
 Recherche d'adresse
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-03-08
        git sha              : $Format:%H$
        copyright            : (C) 2022 by clément Zitouni
        email                : cazitouni@metrotopic.net
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QErrorMessage, QCompleter
from qgis.core import QgsProject, QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsPointXY
from qgis.gui import QgsVertexMarker



# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .simple_ban_dialog import SimbleBanDialog
import os.path
import requests
import json



class SimbleBan:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SimbleBan_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("Recherche d'adresse simple (BAN)")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SimbleBan', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/simple_ban/icon.png'
        self.add_action(
            icon_path,
            text=self.tr("Recherche d'adresse"),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr("Recherche d'adresse simple (BAN)"),
                action)
            self.iface.removeToolBarIcon(action)

    def closeEvent(self, event):
        self.deleteMarker()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        self.dlg = SimbleBanDialog()
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
    
        # Ligne de recherche et completion automatique 
        self.error_dialog = QErrorMessage()
        self.dlg.barre.textEdited.connect(self.completion)
        self.completer = QCompleter([])
        self.markers = []
        self.completer.setCompletionMode(QCompleter.UnfilteredPopupCompletion)
        self.completer.setCaseSensitivity(Qt.CaseInsensitive)
        self.dlg.barre.setCompleter(self.completer)
        self.model = self.completer.model()
        self.dlg.closeEvent = self.closeEvent   
         
        # Connection au boutton et fonction de recherche/cadrage 
        self.dlg.recherche.clicked.connect(self.recherche)

        # show the dialog
        self.dlg.show()
    
    # Fonction de completion auto par mise à jour du model
    def completion(self) :
        listeAddr = []
        if self.dlg.barre.text() : 
            url = "https://adict.strasbourg.eu/addok/search?q={}".format(self.dlg.barre.text())
            r = requests.get(url)
            try :
                json_object = json.loads(r.content)
                for feature in json_object["features"] :
                    listeAddr.append(str(feature["properties"]["label"]))    
            except KeyError:
                pass     
        self.model.setStringList(listeAddr)

    # Fonction de recherche et de cadrage du canvas 
    def recherche(self): 
        url = "https://adict.strasbourg.eu/addok/search?q={}&limit=1".format(self.dlg.barre.text())
        r = requests.get(url)
        self.deleteMarker()
        try :
            json_object = json.loads(r.content)
            x = json_object["features"][0]["geometry"]["coordinates"][0]
            y = json_object["features"][0]["geometry"]["coordinates"][1]
            projetCrs = QgsProject.instance().crs()
            ptsCrs = QgsCoordinateReferenceSystem(4326)
            transform = QgsCoordinateTransform(ptsCrs, projetCrs, QgsProject.instance())
            coord = transform.transform(QgsPointXY(x, y))
            self.iface.mapCanvas().setCenter(coord)
            self.iface.mapCanvas().zoomScale(1000)

            self.deleteMarker()
            m1 = QgsVertexMarker(self.iface.mapCanvas())
            m1.setCenter(coord)
            m1.setColor(QColor(255,0, 0)) #(R,G,B)
            m1.setIconSize(10)
            m1.setIconType(QgsVertexMarker.ICON_X)
            m1.setPenWidth(3)
            self.markers.append(m1)
            self.iface.mapCanvas().refresh()

        except Exception :
            pass
    
    def deleteMarker(self):
        canvas = self.iface.mapCanvas()
        for mark in self.markers:
            canvas.scene().removeItem(mark)
        canvas.refresh()

        
        
        


        




    

